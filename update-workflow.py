#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è n8n workflow —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
"""
import json
import sys
import os

def update_telegram_workflow():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç Telegram workflow –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    
    # –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
    with open('n8n-telegram.json.backup', 'r', encoding='utf-8') as f:
        workflow = json.load(f)
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    updates_made = 0
    
    for node in workflow.get('nodes', []):
        node_name = node.get('name', '')
        parameters = node.get('parameters', {})
        
        # –û–±–Ω–æ–≤–ª—è–µ–º chatId –≤–æ –≤—Å–µ—Ö Telegram –Ω–æ–¥–∞—Ö
        if 'chatId' in parameters:
            old_chat_id = parameters['chatId']
            if old_chat_id == "440211885":
                parameters['chatId'] = "={{ $env.TELEGRAM_CHAT_ID }}"
                updates_made += 1
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω chatId –≤ –Ω–æ–¥–µ: {node_name}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if node_name == "video generation settings":
            js_code = parameters.get('jsCode', '')
            if 'avatar_id' in js_code and '42bf901fcab54935915a291c7206064c' in js_code:
                # –ó–∞–º–µ–Ω—è–µ–º –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–µ ID –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                js_code = js_code.replace(
                    '"avatar_id": "42bf901fcab54935915a291c7206064c"',
                    '"avatar_id": process.env.HEYGEN_AVATAR_ID'
                )
                js_code = js_code.replace(
                    '"voice_id": "91f2ee24f76044619c34cb60a038b0d6"',
                    '"voice_id": process.env.ELEVENLABS_VOICE_ID'
                )
                js_code = js_code.replace(
                    '"speed": 1.1',
                    '"speed": parseFloat(process.env.VIDEO_SPEED || "1.1")'
                )
                js_code = js_code.replace(
                    '"value": "#0000ff"',
                    '"value": process.env.VIDEO_BACKGROUND_COLOR || "#0000ff"'
                )
                js_code = js_code.replace(
                    '"width": 720',
                    '"width": parseInt(process.env.VIDEO_WIDTH || "720")'
                )
                js_code = js_code.replace(
                    '"height": 1280',
                    '"height": parseInt(process.env.VIDEO_HEIGHT || "1280")'
                )
                
                parameters['jsCode'] = js_code
                updates_made += 1
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ –≤ –Ω–æ–¥–µ: {node_name}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –Ω–æ–¥—ã
        if node_name in ["Generate video", "Script generator", "Generate an image"]:
            if 'onError' not in node:
                node['onError'] = 'continueRegularOutput'
                node['continueOnFail'] = True
                updates_made += 1
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ –Ω–æ–¥—É: {node_name}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –Ω–æ–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    monitoring_nodes = []
    
    # –ù–æ–¥–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
    error_notification_node = {
        "parameters": {
            "chatId": "={{ $env.TELEGRAM_CHAT_ID }}",
            "text": "‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:\n\n{{ $json.error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' }}\n\n–í—Ä–µ–º—è: {{ $now.format('DD.MM.YYYY HH:mm:ss') }}",
            "additionalFields": {}
        },
        "type": "n8n-nodes-base.telegram",
        "typeVersion": 1.2,
        "position": [100, 100],
        "id": "error-notification-" + str(hash("error_notification"))[-8:],
        "name": "üö® Error Notification",
        "credentials": {
            "telegramApi": {
                "id": "telegram-creds",
                "name": "Telegram Bot"
            }
        }
    }
    
    # –ù–æ–¥–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_node = {
        "parameters": {
            "chatId": "={{ $env.TELEGRAM_CHAT_ID }}",
            "text": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n\nüìù –°—Ü–µ–Ω–∞—Ä–∏–π: –≥–æ—Ç–æ–≤\nüé¨ –í–∏–¥–µ–æ: {{ $('Generate video').json.data?.status || '–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ' }}\nüéµ –ú—É–∑—ã–∫–∞: {{ $('Get udio song').json.status || '–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ' }}\n\n‚è∞ –í—Ä–µ–º—è: {{ $now.format('DD.MM.YYYY HH:mm:ss') }}",
            "additionalFields": {}
        },
        "type": "n8n-nodes-base.telegram",
        "typeVersion": 1.2,
        "position": [200, 100],
        "id": "stats-notification-" + str(hash("stats"))[-8:],
        "name": "üìä Stats Notification",
        "credentials": {
            "telegramApi": {
                "id": "telegram-creds",
                "name": "Telegram Bot"
            }
        }
    }
    
    monitoring_nodes.extend([error_notification_node, stats_node])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –Ω–æ–¥—ã –≤ workflow
    workflow['nodes'].extend(monitoring_nodes)
    updates_made += len(monitoring_nodes)
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(monitoring_nodes)} –Ω–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open('n8n-telegram-improved.json', 'w', encoding='utf-8') as f:
        json.dump(workflow, f, ensure_ascii=False, indent=2)
    
    print(f"\nüéâ Workflow –æ–±–Ω–æ–≤–ª–µ–Ω! –°–¥–µ–ª–∞–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {updates_made}")
    print("üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: n8n-telegram-improved.json")
    
    return updates_made

def update_local_workflow():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π workflow"""
    
    with open('n8n-local.json', 'r', encoding='utf-8') as f:
        workflow = json.load(f)
    
    updates_made = 0
    
    for node in workflow.get('nodes', []):
        node_name = node.get('name', '')
        parameters = node.get('parameters', {})
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if node_name == "video generation settings":
            js_code = parameters.get('jsCode', '')
            if 'avatar_id' in js_code:
                js_code = js_code.replace(
                    '"avatar_id": "42bf901fcab54935915a291c7206064c"',
                    '"avatar_id": process.env.HEYGEN_AVATAR_ID'
                )
                js_code = js_code.replace(
                    '"voice_id": "91f2ee24f76044619c34cb60a038b0d6"',
                    '"voice_id": process.env.ELEVENLABS_VOICE_ID'
                )
                parameters['jsCode'] = js_code
                updates_made += 1
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º workflow")
    
    with open('n8n-local-improved.json', 'w', encoding='utf-8') as f:
        json.dump(workflow, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π workflow –æ–±–Ω–æ–≤–ª–µ–Ω! –ò–∑–º–µ–Ω–µ–Ω–∏–π: {updates_made}")
    return updates_made

if __name__ == "__main__":
    print("üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ n8n workflows...")
    
    telegram_updates = update_telegram_workflow()
    local_updates = update_local_workflow()
    
    total_updates = telegram_updates + local_updates
    
    print(f"\nüìã –ò–¢–û–ì–û:")
    print(f"   Telegram workflow: {telegram_updates} –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    print(f"   Local workflow: {local_updates} –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    print(f"   –í—Å–µ–≥–æ: {total_updates} –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    
    print(f"\nüìù –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print(f"   1. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ .env —Ñ–∞–π–ª —Å–≤–æ–∏–º–∏ –∫–ª—é—á–∞–º–∏")
    print(f"   2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ n8n-telegram-improved.json –≤ n8n")
    print(f"   3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ credentials –¥–ª—è –≤—Å–µ—Ö API —Å–µ—Ä–≤–∏—Å–æ–≤")
    print(f"   4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ workflow")

