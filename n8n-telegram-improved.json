{
  "name": "My workflow telegram",
  "nodes": [
    {
      "parameters": {
        "url": "https://api.heygen.com/v1/video_status.get",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "video_id",
              "value": "={{ $node[\"Generate video\"].json.data.video_id }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3376,
        320
      ],
      "id": "cb8385a1-62a7-4016-814d-e1fbad764534",
      "name": "Check video status",
      "credentials": {
        "httpHeaderAuth": {
          "id": "Y6A6qFFABbMDyIPL",
          "name": "HeyGen"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "cf495f6b-1907-4c10-9d9e-c0d78058d244",
              "leftValue": "={{ $json.data.status }}",
              "rightValue": "completed",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3184,
        352
      ],
      "id": "445e1104-ef10-44d1-8121-17f931a5c2f3",
      "name": "If"
    },
    {
      "parameters": {
        "amount": 3
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -2976,
        400
      ],
      "id": "4223a4fe-5fa4-4c12-a04f-6a3545e1d65a",
      "name": "Wait",
      "webhookId": "316c46e2-4de0-4d43-9ae0-130fbb2e5844"
    },
    {
      "parameters": {
        "url": "={{ $json.data.video_url }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2976,
        208
      ],
      "id": "c27ffa62-9572-494e-a938-c136ca56c4a0",
      "name": "Download video"
    },
    {
      "parameters": {
        "operation": "sendVideo",
        "chatId": "={{ $env.TELEGRAM_CHAT_ID }}",
        "binaryData": true,
        "additionalFields": {
          "caption": "HeyGen video is ready. Generating background..."
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -2528,
        208
      ],
      "id": "ca55d42f-ef04-44ef-95da-537b6a8b40fe",
      "name": "Send a video",
      "webhookId": "0a7d926f-b2cd-484f-af12-c485cab1c9bc",
      "credentials": {
        "telegramApi": {
          "id": "WVXbeUN2hbZQ5r2G",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        -4544,
        352
      ],
      "id": "138bbe80-9f39-45ae-a6da-75def15fc994",
      "name": "Limit"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "google/gemini-2.5-pro",
          "mode": "id"
        },
        "messages": {
          "values": [
            {
              "content": "=Write a script for a short Reels video:\n\n{{ $json.keyword }}\n\nDirector's idea:\n\n{{ $node['Telegram Trigger'].json.message.text }}\n\nIn your reply, write only the host's spoken lines. No quotation marks, no line breaks, and no escapable characters. Only text. If the director did not specify the language, then use Russian."
            }
          ]
        },
        "options": {
          "maxTokens": 10000
        }
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -4336,
        352
      ],
      "id": "aff93b80-7acf-41ed-8733-ee13c49544f6",
      "name": "Script generator",
      "credentials": {
        "openAiApi": {
          "id": "DpRTY5fEzIHMSmKl",
          "name": "OpenAi account"
        }
      },
      "onError": "continueRegularOutput",
      "continueOnFail": true
    },
    {
      "parameters": {
        "chatId": "={{ $env.TELEGRAM_CHAT_ID }}",
        "text": "=Принято в работу: \"{{ $node['When chat message received'].json.chatInput }}\"",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -5280,
        352
      ],
      "id": "82fc1f89-c352-4034-9515-fecc397e4da9",
      "name": "Send a text message",
      "webhookId": "87f23575-6c3b-47f3-970a-00c3c0ab58e9",
      "credentials": {
        "telegramApi": {
          "id": "WVXbeUN2hbZQ5r2G",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "google/gemini-2.5-pro",
          "mode": "id"
        },
        "messages": {
          "values": [
            {
              "content": "=I have a reels video script: \"{{ $('Transcribe audio or video').item.json.text }}\"\n\nAnd main producer's idea: \"{{ $node['Telegram Trigger'].json.message.text }}\"\n\nI splitted it into {{ $('transcription to parts array').item.json.parts.length }} parts: {{ $('transcription to parts array').item.json.parts.map(k => `\"${k.text.trim()}\"`) }}\n\nGenerate prompts to generate images using Midjourney. Describe the image for each part. Return the result in json in the following format:\n\n{\n   \"scenes\": [\n      {\n        \"part_id\": 0,\n        \"text\": \"...\",\n        \"image_prompt\": \"...\"\n      },\n      {\n        \"part_id\": 1,\n        \"text\": \"...\",\n        \"image_prompt\": \"...\"\n      },\n      ...\n   ]\n}\n\nThe response should only contain json and nothing else."
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -544,
        208
      ],
      "id": "6ecd0067-dc9e-4f52-b13a-409dd56b70bb",
      "name": "Image prompter",
      "credentials": {
        "openAiApi": {
          "id": "DpRTY5fEzIHMSmKl",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.heygen.com/v2/video/generate",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3712,
        320
      ],
      "id": "a8def159-5f1c-47a1-9604-bc32886c079a",
      "name": "Generate video",
      "credentials": {
        "httpHeaderAuth": {
          "id": "Y6A6qFFABbMDyIPL",
          "name": "HeyGen"
        }
      },
      "onError": "continueRegularOutput",
      "continueOnFail": true
    },
    {
      "parameters": {
        "url": "https://api.heygen.com/v2/avatars",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -4624,
        512
      ],
      "id": "253b922e-c653-4dea-b844-42a4476682ab",
      "name": "Avatar list",
      "credentials": {
        "httpHeaderAuth": {
          "id": "Y6A6qFFABbMDyIPL",
          "name": "HeyGen"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.heygen.com/v2/voices",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -4624,
        672
      ],
      "id": "db57cae1-7c95-4d9e-9201-2da68f6d723f",
      "name": "Voices list",
      "credentials": {
        "httpHeaderAuth": {
          "id": "Y6A6qFFABbMDyIPL",
          "name": "HeyGen"
        }
      }
    },
    {
      "parameters": {
        "command": "ffmpeg -y -nostdin -hide_banner -i video.mp4 -vn -acodec mp3 audio.mp3"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -2304,
        208
      ],
      "id": "cce299c0-e708-4f25-b268-4b016eff8277",
      "name": "get audio"
    },
    {
      "parameters": {
        "resource": "speech",
        "operation": "speechToText",
        "additionalOptions": {
          "numberOfSpeakers": 1
        },
        "requestOptions": {}
      },
      "type": "@elevenlabs/n8n-nodes-elevenlabs.elevenLabs",
      "typeVersion": 1,
      "position": [
        -1888,
        208
      ],
      "id": "80342bcb-af6a-4001-a021-1f22416c3f25",
      "name": "Transcribe audio or video",
      "credentials": {
        "elevenLabsApi": {
          "id": "MpVomioxpJIz4Kw4",
          "name": "ElevenLabs account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Получаем данные из входного JSON\nconst inputData = $('Transcribe audio or video').item.json;\nconst words = inputData.words;\n\n// Извлекаем только слова (не пробелы и не audio_event) с их таймингами\nconst wordItems = words.filter(word => word.type === 'word');\n\n// Создаем очищенный текст только из слов (без audio_event)\nconst cleanText = wordItems.map(word => word.text).join(' ');\n\n// Разбиваем текст на части по знакам препинания\nconst textParts = cleanText.split(/[.,!?;:]+/).filter(Boolean);\n\nconst partsWithTiming = [];\nlet currentWordIndex = 0;\n\n// Получаем общую длительность файла\nconst totalDuration = wordItems.length > 0 ? wordItems[wordItems.length - 1].end : 0;\n\n// Для каждой части текста находим соответствующие слова и их тайминги\nfor (let partIndex = 0; partIndex < textParts.length; partIndex++) {\n  const part = textParts[partIndex];\n  \n  // Очищаем часть от лишних пробелов и разбиваем на слова\n  const partWords = part.trim().split(/\\s+/).filter(Boolean);\n  \n  if (partWords.length === 0) continue;\n  \n  // Находим индексы слов этой части в общем массиве слов\n  const partWordIndices = [];\n  let tempIndex = currentWordIndex;\n  \n  for (const partWord of partWords) {\n    // Ищем слово в массиве wordItems начиная с текущей позиции\n    let found = false;\n    for (let i = tempIndex; i < wordItems.length; i++) {\n      // Убираем знаки препинания из слова для сравнения\n      const cleanWord = wordItems[i].text.replace(/[.,!?;:\"'(){}\\[\\]<>@#$%^&*\\-_=+\\\\/|~`…]/g, '');\n      if (cleanWord.toLowerCase() === partWord.toLowerCase()) {\n        partWordIndices.push(i);\n        tempIndex = i + 1;\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      console.warn(`Слово \"${partWord}\" не найдено в массиве words`);\n    }\n  }\n  \n  if (partWordIndices.length > 0) {\n    // Определяем start и end для части\n    let startTime, endTime;\n    \n    if (partIndex === 0) {\n      // Первая часть начинается с самого начала\n      startTime = 0;\n    } else {\n      // Последующие части начинаются там, где закончилась предыдущая\n      startTime = partsWithTiming[partsWithTiming.length - 1].end;\n    }\n    \n    if (partIndex === textParts.length - 1) {\n      // Последняя часть заканчивается в конце файла\n      endTime = totalDuration;\n    } else {\n      // Находим начало следующей группы слов\n      const nextPartFirstWordIndex = tempIndex;\n      if (nextPartFirstWordIndex < wordItems.length) {\n        endTime = wordItems[nextPartFirstWordIndex].start;\n      } else {\n        endTime = totalDuration;\n      }\n    }\n    \n    partsWithTiming.push({\n      text: part.trim(),\n      start: startTime,\n      end: endTime,\n      duration: endTime - startTime,\n      wordCount: partWords.length\n    });\n    \n    // Обновляем текущий индекс для следующей части\n    currentWordIndex = partWordIndices[partWordIndices.length - 1] + 1;\n  }\n}\n\nreturn { json: { parts: partsWithTiming } };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1216,
        208
      ],
      "id": "17d51a1a-7785-4d57-9bb5-45ea30eb53cf",
      "name": "transcription to parts array"
    },
    {
      "parameters": {
        "fileSelector": "audio.mp3",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -2096,
        208
      ],
      "id": "1ecaaca4-a19d-42e3-9b1d-945fde4074a0",
      "name": "read audio"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nreturn $input.first().json.message.content.scenes.map(s => ({ json: { scene: s }}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -224,
        208
      ],
      "id": "c4ea28a7-bb64-47b3-bb30-a527709a1661",
      "name": "scenes to items"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nconst durations = $('transcription to parts array').item.json.parts;\n\nconst result = [];\nlet i = 0;\nfor (const item of $input.all()) {\n  result.push({\n    file_name: item.json.fileName,\n    duration: durations[i].duration\n  });\n  i++;\n}\n\nreturn { json: { result }};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        688,
        208
      ],
      "id": "fa0229aa-1c2c-4467-ad7d-3420cd0c91e9",
      "name": "generate data to render background"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nconst text = $input.first().json.result.map(r => `file '${r.file_name}'\\nduration ${r.duration}`).join('\\n');\nconst fileName = 'output.txt';\n\n// Создаем binary данные\nconst binaryData = Buffer.from(text, 'utf8');\n\nreturn [\n  {\n    json: {\n      fileName: fileName\n    },\n    binary: {\n      data: {\n        data: binaryData.toString('base64'),\n        mimeType: 'text/plain',\n        fileName: fileName\n      }\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        864,
        208
      ],
      "id": "50caaf0c-e1bf-44a8-a83a-5e794a9e0eb8",
      "name": "generate file to render background"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "background.txt",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        1072,
        208
      ],
      "id": "874c6349-69dd-444b-8ee6-f93c2c2923d1",
      "name": "save render file"
    },
    {
      "parameters": {
        "command": "nice -n 10 ffmpeg -y -nostdin -hide_banner -loglevel error \\\n  -stream_loop -1 -i background.mp4 \\\n  -i video.mp4 \\\n  -filter_complex '[1:v]scale=1080:1920,setsar=1,colorkey=0x0000ff:0.3:0.2[fg];[0:v][fg]overlay=shortest=1[out]' \\\n  -map '[out]' -map '1:a?' \\\n  -c:v libx264 -crf 18 -preset veryfast -threads 2 -c:a copy \\\n  \"output.mp4\""
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1488,
        208
      ],
      "id": "4ce4bed3-ba5c-4268-899e-4f61a6eb913e",
      "name": "mix avatar and background"
    },
    {
      "parameters": {
        "command": "ffmpeg -y -nostdin -hide_banner -f concat -safe 0 -i background.txt -vf \"scale=-1:1920,crop=1080:1920:(iw-1080)/2:0\" -r 30 -c:v libx264 -pix_fmt yuv420p background.mp4"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1280,
        208
      ],
      "id": "2f869ce6-6157-433c-a8f6-96388798948c",
      "name": "mix images"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const video_inputs = [];\nvideo_inputs.push({\n  \"character\": {\n    \"type\": \"avatar\",\n    \"avatar_id\": process.env.HEYGEN_AVATAR_ID, // вставьте avatar_id сюда\n    \"avatar_style\": \"normal\",\n    \"matting\": true,\n    \"offset\": {\n      \"x\": 0,\n      \"y\": 0\n    },\n    \"scale\": 1\n  },\n  \"voice\": {\n    \"type\": \"text\",\n    \"input_text\": $('Script generator').item.json.message.content,\n    \"voice_id\": process.env.ELEVENLABS_VOICE_ID, // вставьте voice_id сюда\n    \"speed\": parseFloat(process.env.VIDEO_SPEED || \"1.1\"),\n    \"elevenlabs_settings\": {\n      \"model\": \"eleven_multilingual_v2\"\n    }\n  },\n  \"background\": {\n    \"type\": \"color\",\n    \"value\": process.env.VIDEO_BACKGROUND_COLOR || \"#0000ff\"\n  }\n});\nreturn {\n  \"video_inputs\": video_inputs,\n  \"dimension\": {\n    \"width\": parseInt(process.env.VIDEO_WIDTH || \"720\"),\n    \"height\": parseInt(process.env.VIDEO_HEIGHT || \"1280\")\n  }\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3968,
        320
      ],
      "id": "9b753201-794c-4ac4-9c2e-3043ddffe6a4",
      "name": "video generation settings"
    },
    {
      "parameters": {
        "jsCode": "const list = $json.message.content;\n\nreturn list.map(k => ({ json: { keyword: k } }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4736,
        352
      ],
      "id": "32113c35-f6a5-4d94-96ff-50c28288998c",
      "name": "ideas transform"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "video.mp4",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -2736,
        208
      ],
      "id": "3be30480-ca65-4e82-8022-5848250973da",
      "name": "save video to file"
    },
    {
      "parameters": {
        "jsCode": "// Получаем данные от предыдущей ноды\nconst inputData = $('Transcribe audio or video').item.json;\n\n// Проверяем структуру данных\nconsole.log('Input structure:', typeof inputData, Array.isArray(inputData));\n\nlet elevenlabsData;\n\n// Пробуем разные варианты структуры данных\nif (Array.isArray(inputData)) {\n  elevenlabsData = inputData;\n} else if (inputData.body && Array.isArray(inputData.body)) {\n  elevenlabsData = inputData.body;\n} else if (inputData.data && Array.isArray(inputData.data)) {\n  elevenlabsData = inputData.data;\n} else {\n  // Если данные пришли напрямую как объект\n  elevenlabsData = [inputData];\n}\n\nconsole.log('Processed elevenlabs data:', elevenlabsData);\n\n// Извлекаем массив words из первого элемента\nconst wordsArray = elevenlabsData[0].words;\n\n// Фильтруем только слова (исключаем spacing и audio_event)\nconst wordsOnly = wordsArray.filter(item => item.type === 'word');\n\nconsole.log('Filtered words count:', wordsOnly.length);\n\n// Функция конвертации времени в SRT формат\nfunction secondsToSrtTime(seconds) {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const secs = Math.floor(seconds % 60);\n  const ms = Math.floor((seconds % 1) * 1000);\n  return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')},${ms.toString().padStart(3, '0')}`;\n}\n\n// Генерируем SRT контент для каждого слова\nlet srtContent = '';\nwordsOnly.forEach((word, index) => {\n  const startTime = secondsToSrtTime(word.start);\n  const endTime = secondsToSrtTime(word.end);\n  \n  srtContent += `${index + 1}\\n`;\n  srtContent += `${startTime} --> ${endTime}\\n`;\n  srtContent += `${word.text}\\n\\n`;\n});\n\nconst binaryData = Buffer.from(srtContent, 'utf8');\n\nreturn [\n  {\n    json: {\n      fileName: 'subtitles.srt',\n      srtContent: srtContent,\n      totalWords: wordsOnly.length,\n      language: elevenlabsData[0].language_code || 'unknown',\n      fullText: elevenlabsData[0].text || ''\n    },\n    binary: {\n      data: {\n        data: binaryData.toString('base64'),\n        mimeType: 'text/plain',\n        fileName: 'subtitles.srt'\n      }\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1648,
        208
      ],
      "id": "22eee36e-324e-4522-b310-c1ad0560d96f",
      "name": "generate subtitles file"
    },
    {
      "parameters": {
        "command": "nice -n 10 ffmpeg -y -nostdin -hide_banner -loglevel error \\\n  -i output.mp4 \\\n  -vf \"subtitles=subtitles.srt:force_style='FontName=DejaVu Sans,FontSize=20,PrimaryColour=&Hffffff,OutlineColour=&H000000,Outline=2,Alignment=2,MarginV=30'\" \\\n  -c:v libx264 -crf 18 -preset veryfast -threads 2 \\\n  -c:a copy \\\n  \"result.mp4\""
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        1680,
        208
      ],
      "id": "e7885269-03ff-43f0-9378-3989ab30202f",
      "name": "render subtitles"
    },
    {
      "parameters": {
        "fileSelector": "result.mp4",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        1872,
        208
      ],
      "id": "6902e8e3-98e6-4786-b1dd-24cd3980d7eb",
      "name": "read video with subtitles"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "subtitles.srt",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -1424,
        208
      ],
      "id": "ad90f49f-1a6a-4fa2-a3dd-46837e44dbb0",
      "name": "save subtitles file"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "google/gemini-2.5-pro",
          "mode": "id"
        },
        "messages": {
          "values": [
            {
              "content": "=Write 3 catchy hook titles for Reels video for the director's task:\n\n{{ $node['Telegram Trigger'].json.message.text }}\n\nReturn the ideas as a JSON array of strings, sorted by interest from most engaging to least. The response must contain nothing else."
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -5120,
        352
      ],
      "id": "7c614752-5879-475b-b110-a1aac30da5ee",
      "name": "Get titles",
      "credentials": {
        "openAiApi": {
          "id": "DpRTY5fEzIHMSmKl",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Add a new field called 'myNewField' to the JSON of the item\n$input.item.json.fileName = Math.random().toString(36).substring(2);\n\nreturn $input.item;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        272,
        208
      ],
      "id": "9bd6a35d-0247-4888-8573-7d40d597ba80",
      "name": "Generate random image name"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "={{ $json.fileName }}.png",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        480,
        208
      ],
      "id": "277a4374-3526-4839-87cd-e241cc802f49",
      "name": "save images to files"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "3aaa7e58-dbbf-4ca9-8bbf-02a9e96ac6f9",
        "responseMode": "lastNode",
        "responseData": "firstEntryBinary",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -480,
        1024
      ],
      "id": "e8b2ba9b-8c4e-4603-aa77-93f4218dd511",
      "name": "generate image endpoint",
      "webhookId": "3aaa7e58-dbbf-4ca9-8bbf-02a9e96ac6f9"
    },
    {
      "parameters": {
        "resource": "image",
        "model": "gpt-image-1",
        "prompt": "={{ $json.body.prompt }}",
        "options": {
          "quality": "low",
          "size": "1024x1536"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -288,
        1024
      ],
      "id": "41ee3b65-59f1-4d97-83b3-c06afa319479",
      "name": "Generate an image",
      "retryOnFail": false,
      "maxTries": 5,
      "credentials": {
        "openAiApi": {
          "id": "4PMykObgr7BHh8mW",
          "name": "OpenAi account 2"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.myNewField = 1;\n}\n\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -64,
        992
      ],
      "id": "baf2b5f5-c714-4c8e-8ab2-7a3dfefbb91b",
      "name": "result"
    },
    {
      "parameters": {
        "amount": 10
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -64,
        1120
      ],
      "id": "640daeb1-16be-49ac-bc14-bd504512ab51",
      "name": "Wait 10 seconds",
      "webhookId": "2f8cacb1-ad30-42dc-bb8b-68329469b847"
    },
    {
      "parameters": {
        "chatId": "={{ $env.TELEGRAM_CHAT_ID }}",
        "text": "=Images successfully generated",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        288,
        0
      ],
      "id": "9a4baad5-9fe3-438d-99a2-1afd0baba364",
      "name": "Images generated message",
      "webhookId": "2f039afe-9ee9-4467-acdc-0474dad5b5a7",
      "executeOnce": true,
      "credentials": {
        "telegramApi": {
          "id": "WVXbeUN2hbZQ5r2G",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $env.TELEGRAM_CHAT_ID }}",
        "text": "=Starting image generation...",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        0,
        0
      ],
      "id": "24d3b62f-ebd3-4093-94dc-591f0324a21d",
      "name": "starting image generation message",
      "webhookId": "89cf951d-88ea-4dff-9515-2dad498a7a76",
      "executeOnce": true,
      "credentials": {
        "telegramApi": {
          "id": "WVXbeUN2hbZQ5r2G",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $env.TELEGRAM_CHAT_ID }}",
        "text": "=Script is ready:\n\n{{ $('Script generator').item.json.message.content }}\n\nStarting video generation...",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -3984,
        128
      ],
      "id": "d5368af0-c931-404d-b0a0-4e286b8d5d6b",
      "name": "script is ready message",
      "webhookId": "064c80b9-7e6c-4770-b9e1-debb20f9a665",
      "executeOnce": true,
      "credentials": {
        "telegramApi": {
          "id": "WVXbeUN2hbZQ5r2G",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $env.TELEGRAM_CHAT_ID }}",
        "text": "=Video title is ready:\n\n{{ $json.keyword }}\n\nStarting script generation...",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -4304,
        128
      ],
      "id": "39d226eb-15c8-4612-b798-8fd430e297ac",
      "name": "title is ready message",
      "webhookId": "99b45aad-bd9d-4eaf-9821-584ee32e0c22",
      "executeOnce": true,
      "credentials": {
        "telegramApi": {
          "id": "WVXbeUN2hbZQ5r2G",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.piapi.ai/api/v1/task",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"model\": \"music-u\",\n    \"task_type\": \"generate_music\",\n    \"input\": {\n        \"negative_tags\": \"\",\n        \"gpt_description_prompt\": \"{{ $node['song prompter'].json.message.content.song_prompt }}\",\n        \"lyrics_type\": \"instrumental\",\n        \"seed\": -25443934\n    }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -720,
        208
      ],
      "id": "94242179-2ebe-4480-a270-b9af678c1bbb",
      "name": "Generate udio song",
      "credentials": {
        "httpHeaderAuth": {
          "id": "eJCj2U4lRyV8aM1v",
          "name": "PiApi"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://api.piapi.ai/api/v1/task/{{ $node[\"Generate udio song\"].json.data.task_id }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2128,
        208
      ],
      "id": "7205b76d-26a7-4eee-ba33-5018728588d1",
      "name": "Get udio song",
      "credentials": {
        "httpHeaderAuth": {
          "id": "eJCj2U4lRyV8aM1v",
          "name": "PiApi"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b2e87263-2fbf-4031-9663-8221a7640a88",
              "leftValue": "={{ $json.data.status }}",
              "rightValue": "completed",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2320,
        208
      ],
      "id": "42af5304-6650-4c7d-b999-4ff3551150a1",
      "name": "If1"
    },
    {
      "parameters": {
        "amount": 3
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2560,
        384
      ],
      "id": "8f8bd67b-2a19-4e5e-93fc-d3fb06422f88",
      "name": "Wait1",
      "webhookId": "354ddeb5-a401-48a7-97a8-945a3905919d"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "music.mp3",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        2784,
        192
      ],
      "id": "8427e8a5-e4b0-4e44-9c83-f4f0a3514679",
      "name": "save music file"
    },
    {
      "parameters": {
        "url": "={{ $node[\"Get udio song\"].json.data.output.songs[0].song_path }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2560,
        192
      ],
      "id": "5ce8e5eb-f33a-470d-81d1-f470871151cc",
      "name": "download song"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:5678/webhook/6d599738-2e3a-41dc-aa09-92b25b9cb051",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "prompt",
              "value": "={{ $json.scene.image_prompt }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        0,
        208
      ],
      "id": "1459df1c-fe31-498d-a0d8-e330718a29fb",
      "name": "image generation web hook request"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "google/gemini-2.5-pro",
          "mode": "id"
        },
        "messages": {
          "values": [
            {
              "content": "=I have a reels video script: \"{{ $('Transcribe audio or video').item.json.text }}\"\n\nAnd main producer's idea: \"{{ $node['Telegram Trigger'].json.message.text }}\"\n\nGenerate prompt to generate intsrumental soundtrack song using Suno/Udio. Soundtrack should fit with script and topic and easy to voice over it. Prompt should be in english. Return the result in json in the following format:\n\n{\n   \"song_prompt\": \"...\"\n}\n\nThe response should only contain json and nothing else."
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -1040,
        208
      ],
      "id": "70ef4dfc-1f92-40ef-9cf2-588adb400498",
      "name": "song prompter",
      "credentials": {
        "openAiApi": {
          "id": "DpRTY5fEzIHMSmKl",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "command": "nice -n 10 ffmpeg -y -nostdin -hide_banner -loglevel error \\\n  -i result.mp4 \\\n  -ss 00:01:00 -i music.mp3 \\\n  -filter_complex '[1:a]volume=-25dB[music];[0:a][music]amix=inputs=2:duration=first[audio]' \\\n  -map '0:v' -map '[audio]' \\\n  -c:v libx264 -crf 18 -preset veryfast -threads 2 -c:a aac \\\n  \"final.mp4\""
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2992,
        192
      ],
      "id": "48db1e27-4a50-4bd6-b208-4678c55d596f",
      "name": "mix video and music"
    },
    {
      "parameters": {
        "operation": "sendVideo",
        "chatId": "={{ $env.TELEGRAM_CHAT_ID }}",
        "binaryData": true,
        "additionalFields": {
          "caption": "Video without music is ready!"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2128,
        0
      ],
      "id": "4b3895c8-0cf1-4c14-b5e9-a8f8e2e9586c",
      "name": "send video without music",
      "webhookId": "369007fe-32aa-47ea-bbb1-3fe6b55efa5a",
      "credentials": {
        "telegramApi": {
          "id": "WVXbeUN2hbZQ5r2G",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "operation": "sendVideo",
        "chatId": "={{ $env.TELEGRAM_CHAT_ID }}",
        "binaryData": true,
        "additionalFields": {
          "caption": "Video is ready!"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        3408,
        192
      ],
      "id": "dbcf4aae-0aff-47ad-8691-b45cae628e7e",
      "name": "send final video",
      "webhookId": "c4226237-a91b-40e0-b7af-b81dcad8c2f9",
      "credentials": {
        "telegramApi": {
          "id": "WVXbeUN2hbZQ5r2G",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "fileSelector": "final.mp4",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        3200,
        192
      ],
      "id": "f44d6fef-1f51-4230-aed9-c1d775044c30",
      "name": "read final video"
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -5744,
        368
      ],
      "id": "0dd8e47e-d298-49e9-8dfe-78292f63e278",
      "name": "Telegram Trigger",
      "webhookId": "91d26ab8-48a1-4afd-b4e2-85b94ac6c768",
      "credentials": {
        "telegramApi": {
          "id": "WVXbeUN2hbZQ5r2G",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "10a202a0-610d-445c-854a-04793b2b6f6b",
              "leftValue": "={{ $json.message.from.id }}",
              "rightValue": 440211885,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -5520,
        368
      ],
      "id": "7662273a-a6ab-4f95-9b47-31b082865e25",
      "name": "if it's from me"
    },
    {
      "parameters": {
        "chatId": "={{ $env.TELEGRAM_CHAT_ID }}",
        "text": "❌ Ошибка в процессе генерации контента:\n\n{{ $json.error?.message || 'Неизвестная ошибка' }}\n\nВремя: {{ $now.format('DD.MM.YYYY HH:mm:ss') }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        100,
        100
      ],
      "id": "error-notification-47744032",
      "name": "🚨 Error Notification",
      "credentials": {
        "telegramApi": {
          "id": "telegram-creds",
          "name": "Telegram Bot"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $env.TELEGRAM_CHAT_ID }}",
        "text": "📊 Статистика генерации:\n\n📝 Сценарий: готов\n🎬 Видео: {{ $('Generate video').json.data?.status || 'в процессе' }}\n🎵 Музыка: {{ $('Get udio song').json.status || 'в процессе' }}\n\n⏰ Время: {{ $now.format('DD.MM.YYYY HH:mm:ss') }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        200,
        100
      ],
      "id": "stats-notification-93433933",
      "name": "📊 Stats Notification",
      "credentials": {
        "telegramApi": {
          "id": "telegram-creds",
          "name": "Telegram Bot"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Check video status": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Download video",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Check video status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download video": {
      "main": [
        [
          {
            "node": "save video to file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit": {
      "main": [
        [
          {
            "node": "Script generator",
            "type": "main",
            "index": 0
          },
          {
            "node": "title is ready message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Script generator": {
      "main": [
        [
          {
            "node": "video generation settings",
            "type": "main",
            "index": 0
          },
          {
            "node": "script is ready message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a text message": {
      "main": [
        [
          {
            "node": "Get titles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Image prompter": {
      "main": [
        [
          {
            "node": "scenes to items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate video": {
      "main": [
        [
          {
            "node": "Check video status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get audio": {
      "main": [
        [
          {
            "node": "read audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcribe audio or video": {
      "main": [
        [
          {
            "node": "generate subtitles file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "transcription to parts array": {
      "main": [
        [
          {
            "node": "song prompter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "read audio": {
      "main": [
        [
          {
            "node": "Transcribe audio or video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "scenes to items": {
      "main": [
        [
          {
            "node": "starting image generation message",
            "type": "main",
            "index": 0
          },
          {
            "node": "image generation web hook request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "generate data to render background": {
      "main": [
        [
          {
            "node": "generate file to render background",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "generate file to render background": {
      "main": [
        [
          {
            "node": "save render file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "save render file": {
      "main": [
        [
          {
            "node": "mix images",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "mix avatar and background": {
      "main": [
        [
          {
            "node": "render subtitles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "mix images": {
      "main": [
        [
          {
            "node": "mix avatar and background",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a video": {
      "main": [
        [
          {
            "node": "get audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "video generation settings": {
      "main": [
        [
          {
            "node": "Generate video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ideas transform": {
      "main": [
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "save video to file": {
      "main": [
        [
          {
            "node": "Send a video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "generate subtitles file": {
      "main": [
        [
          {
            "node": "save subtitles file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "render subtitles": {
      "main": [
        [
          {
            "node": "read video with subtitles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "read video with subtitles": {
      "main": [
        [
          {
            "node": "send video without music",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get udio song",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "save subtitles file": {
      "main": [
        [
          {
            "node": "transcription to parts array",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get titles": {
      "main": [
        [
          {
            "node": "ideas transform",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate random image name": {
      "main": [
        [
          {
            "node": "save images to files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "save images to files": {
      "main": [
        [
          {
            "node": "generate data to render background",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "generate image endpoint": {
      "main": [
        [
          {
            "node": "Generate an image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate an image": {
      "main": [
        [
          {
            "node": "result",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait 10 seconds",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 10 seconds": {
      "main": [
        [
          {
            "node": "Generate an image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate udio song": {
      "main": [
        [
          {
            "node": "Image prompter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get udio song": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "download song",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "Get udio song",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "download song": {
      "main": [
        [
          {
            "node": "save music file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "image generation web hook request": {
      "main": [
        [
          {
            "node": "Generate random image name",
            "type": "main",
            "index": 0
          },
          {
            "node": "Images generated message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "song prompter": {
      "main": [
        [
          {
            "node": "Generate udio song",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "save music file": {
      "main": [
        [
          {
            "node": "mix video and music",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "mix video and music": {
      "main": [
        [
          {
            "node": "read final video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "read final video": {
      "main": [
        [
          {
            "node": "send final video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "if it's from me",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "if it's from me": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "3dfb34bf-a9cd-4ec2-9715-a0bc74074ba8",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "46e1d9181a1351d844cdacfcb89709078674caff601416869a20a79924f3edfc"
  },
  "id": "jPETBW2duEjQmX3a",
  "tags": []
}